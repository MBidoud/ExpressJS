const axios = require("axios");
const fs = require("fs");
const path = require("path");

const BASE_URL = "http://localhost:4000";

// Couleurs pour les logs
const colors = {
  green: "\x1b[32m",
  red: "\x1b[31m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  cyan: "\x1b[36m",
  reset: "\x1b[0m",
};

function log(message, color = "reset") {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Fonction pour attendre
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

async function testLoggingMiddleware() {
  try {
    log("\nüß™ Test du Middleware de Logging Personnalis√©", "cyan");
    log("=" * 60, "cyan");

    // Test 1: V√©rifier que le serveur est accessible
    log("\nüì° Test 1: Connexion au serveur", "blue");
    const healthResponse = await axios.get(`${BASE_URL}/`);
    log("‚úÖ Serveur accessible", "green");
    console.log("Message:", healthResponse.data.message);

    // Test 2: Requ√™te GET simple
    log("\nüë• Test 2: Requ√™te GET - Liste des utilisateurs", "blue");
    const usersResponse = await axios.get(`${BASE_URL}/users`);
    log("‚úÖ Requ√™te GET r√©ussie", "green");
    console.log("Nombre d'utilisateurs:", usersResponse.data.count);

    // Test 3: Requ√™te POST avec body
    log("\n‚ûï Test 3: Requ√™te POST - Cr√©ation utilisateur", "blue");
    const newUser = {
      name: "Test User",
      email: "test@example.com",
    };
    const createResponse = await axios.post(`${BASE_URL}/users`, newUser);
    log("‚úÖ Requ√™te POST r√©ussie", "green");
    console.log("Utilisateur cr√©√©:", createResponse.data.data.name);

    // Test 4: Requ√™te avec param√®tres
    log("\nüîç Test 4: Requ√™te avec param√®tres - D√©tails produit", "blue");
    const productId = 123;
    const productResponse = await axios.get(
      `${BASE_URL}/products/${productId}`
    );
    log("‚úÖ Requ√™te avec param√®tres r√©ussie", "green");
    console.log("Produit:", productResponse.data.data.name);

    // Test 5: Requ√™te lente pour tester les temps de r√©ponse
    log("\n‚è±Ô∏è Test 5: Requ√™te lente (2 secondes)", "blue");
    const startTime = Date.now();
    const slowResponse = await axios.get(`${BASE_URL}/slow`);
    const responseTime = Date.now() - startTime;
    log("‚úÖ Requ√™te lente r√©ussie", "green");
    console.log(`Temps de r√©ponse: ${responseTime}ms`);

    // Test 6: Erreur 400
    log("\n‚ùå Test 6: Erreur 400 - POST sans donn√©es", "blue");
    try {
      await axios.post(`${BASE_URL}/users`, {});
    } catch (error) {
      if (error.response && error.response.status === 400) {
        log("‚úÖ Erreur 400 correctement logg√©e", "green");
      }
    }

    // Test 7: Erreur 404
    log("\n‚ùì Test 7: Erreur 404 - Route inexistante", "blue");
    try {
      await axios.get(`${BASE_URL}/route-inexistante`);
    } catch (error) {
      if (error.response && error.response.status === 404) {
        log("‚úÖ Erreur 404 correctement logg√©e", "green");
      }
    }

    // Test 8: Erreur 500
    log("\nüí• Test 8: Erreur 500 - Erreur serveur", "blue");
    try {
      await axios.get(`${BASE_URL}/error`);
    } catch (error) {
      if (error.response && error.response.status === 500) {
        log("‚úÖ Erreur 500 correctement logg√©e", "green");
      }
    }

    // Test 9: Param√®tre invalide
    log("\nüî¢ Test 9: Param√®tre invalide - ID produit non num√©rique", "blue");
    try {
      await axios.get(`${BASE_URL}/products/abc`);
    } catch (error) {
      if (error.response && error.response.status === 400) {
        log("‚úÖ Param√®tre invalide correctement logg√©", "green");
      }
    }

    // Attendre un peu pour que tous les logs soient √©crits
    await sleep(1000);

    // Test 10: Analyser les logs g√©n√©r√©s
    log("\nüìä Test 10: Analyse des logs g√©n√©r√©s", "blue");
    try {
      const analysisResponse = await axios.get(`${BASE_URL}/logs/analysis`);
      log("‚úÖ Analyse des logs r√©ussie", "green");

      const analysis = analysisResponse.data.analysis;
      console.log("Statistiques des logs:");
      console.log(`- Total des requ√™tes: ${analysis.totalRequests}`);
      console.log("- M√©thodes HTTP:", analysis.methodCounts);
      console.log("- Codes de statut:", analysis.statusCounts);

      if (analysis.responseTimes) {
        console.log("- Temps de r√©ponse:");
        console.log(`  ‚Ä¢ Moyenne: ${analysis.responseTimes.average}ms`);
        console.log(`  ‚Ä¢ M√©diane: ${analysis.responseTimes.median}ms`);
        console.log(`  ‚Ä¢ Min: ${analysis.responseTimes.min}ms`);
        console.log(`  ‚Ä¢ Max: ${analysis.responseTimes.max}ms`);
        console.log(
          `  ‚Ä¢ 95e percentile: ${analysis.responseTimes.percentile95}ms`
        );
      }
    } catch (error) {
      log(`‚ùå Erreur lors de l'analyse: ${error.message}`, "red");
    }

    // Test 11: V√©rifier les fichiers de logs
    log("\nüìÅ Test 11: V√©rification des fichiers de logs", "blue");
    const logsDir = path.join(__dirname, "logs");

    if (fs.existsSync(logsDir)) {
      const logFiles = fs.readdirSync(logsDir);
      log("‚úÖ Dossier de logs cr√©√©", "green");
      console.log("Fichiers de logs:", logFiles);

      // V√©rifier le contenu du fichier de log principal
      const today = new Date().toISOString().substring(0, 10);
      const accessLogFile = path.join(logsDir, `access-${today}.log`);

      if (fs.existsSync(accessLogFile)) {
        const logContent = fs.readFileSync(accessLogFile, "utf8");
        const logLines = logContent.split("\n").filter((line) => line.trim());
        log(
          `‚úÖ Fichier access-${today}.log contient ${logLines.length} entr√©es`,
          "green"
        );

        // Afficher les 3 derni√®res lignes de log
        console.log("\nDerni√®res entr√©es de log:");
        logLines.slice(-3).forEach((line, index) => {
          console.log(`${index + 1}. ${line}`);
        });
      }
    } else {
      log("‚ùå Dossier de logs non trouv√©", "red");
    }

    // Test 12: Test des logs bruts
    log("\nüìù Test 12: R√©cup√©ration des logs bruts", "blue");
    try {
      const rawLogsResponse = await axios.get(`${BASE_URL}/logs/raw`);
      log("‚úÖ Logs bruts r√©cup√©r√©s", "green");
      console.log(
        `Nombre de lignes r√©cup√©r√©es: ${rawLogsResponse.data.logs.length}`
      );
    } catch (error) {
      log(`‚ùå Erreur logs bruts: ${error.message}`, "red");
    }

    log("\nüéâ Tous les tests du middleware de logging termin√©s!", "green");
    log("=" * 60, "cyan");

    // Recommandations
    log("\nüí° Points √† v√©rifier:", "yellow");
    log("1. Fichiers de logs cr√©√©s dans le dossier ./logs/", "yellow");
    log("2. Rotation quotidienne des logs fonctionnelle", "yellow");
    log("3. Diff√©rents formats de log disponibles", "yellow");
    log("4. Logging des erreurs s√©par√©", "yellow");
    log("5. Analyse statistique des logs", "yellow");
  } catch (error) {
    log(`‚ùå Erreur dans les tests: ${error.message}`, "red");
    if (error.response) {
      console.log("Statut:", error.response.status);
      console.log("Donn√©es:", error.response.data);
    }
  }
}

// V√©rifier si le serveur est d√©marr√©
async function checkServer() {
  try {
    await axios.get(`${BASE_URL}/`);
    return true;
  } catch (error) {
    return false;
  }
}

async function main() {
  log("üîç V√©rification de la disponibilit√© du serveur...", "yellow");

  const serverRunning = await checkServer();
  if (!serverRunning) {
    log("‚ùå Le serveur n'est pas d√©marr√©. Veuillez lancer: npm start", "red");
    log("   ou en mode d√©veloppement: npm run dev", "yellow");
    process.exit(1);
  }

  log("‚úÖ Serveur disponible, d√©marrage des tests...", "green");
  await sleep(1000);

  await testLoggingMiddleware();
}

if (require.main === module) {
  main();
}

module.exports = { testLoggingMiddleware, checkServer };
